load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "launch",
    srcs = [
        "cluster.go",
        "insecure_key.go",
        "launch.go",
        "metroctl.go",
        "prefixed_stdio.go",
        "swtpm.go",
    ],
    data = [
        "//metropolis/cli/metroctl:metroctl_lite",
        "//metropolis/node:image",
        "//metropolis/test/nanoswitch:initramfs",
        "//metropolis/test/swtpm/certtool",
        "//metropolis/test/swtpm/swtpm_cert",
        "//osbase/test/ktest:linux-testing",
        "//third_party/edk2:OVMF_CODE.fd",
        "//third_party/edk2:OVMF_VARS.fd",
        "@swtpm",
        "@swtpm//:swtpm_localca",
        "@swtpm//:swtpm_setup",
    ],
    importpath = "source.monogon.dev/metropolis/test/launch",
    visibility = ["//visibility:public"],
    x_defs = {
        "xSwtpmPath": "$(rlocationpath @swtpm )",
        "xSwtpmSetupPath": "$(rlocationpath @swtpm//:swtpm_setup )",
        "xSwtpmLocalCAPath": "$(rlocationpath @swtpm//:swtpm_localca )",
        "xSwtpmCertPath": "$(rlocationpath //metropolis/test/swtpm/swtpm_cert )",
        "xCerttoolPath": "$(rlocationpath //metropolis/test/swtpm/certtool )",
        "xMetroctlPath": "$(rlocationpath //metropolis/cli/metroctl:metroctl_lite )",
        "xOvmfVarsPath": "$(rlocationpath //third_party/edk2:OVMF_VARS.fd )",
        "xOvmfCodePath": "$(rlocationpath //third_party/edk2:OVMF_CODE.fd )",
        "xKernelPath": "$(rlocationpath //osbase/test/ktest:linux-testing )",
        "xInitramfsPath": "$(rlocationpath //metropolis/test/nanoswitch:initramfs )",
        "xNodeImagePath": "$(rlocationpath //metropolis/node:image )",
    },
    deps = [
        "//go/qcow2",
        "//metropolis/cli/metroctl/core",
        "//metropolis/node",
        "//metropolis/node/core/curator/proto/api",
        "//metropolis/node/core/identity",
        "//metropolis/node/core/rpc",
        "//metropolis/node/core/rpc/resolver",
        "//metropolis/proto/api",
        "//metropolis/proto/common",
        "//metropolis/test/localregistry",
        "//osbase/logbuffer",
        "//osbase/test/launch",
        "@com_github_cenkalti_backoff_v4//:backoff",
        "@com_github_kballard_go_shellquote//:go-shellquote",
        "@io_bazel_rules_go//go/runfiles:go_default_library",
        "@io_k8s_client_go//kubernetes",
        "@io_k8s_client_go//rest",
        "@org_golang_google_grpc//:grpc",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//proto",
        "@org_golang_x_net//proxy",
        "@org_golang_x_sys//unix",
        "@org_uber_go_multierr//:multierr",
    ],
)
